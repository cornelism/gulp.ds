@import compass
@import compass/css3

@import susy
@import susyone

@import lib/mixins
@import lib/susy-defaults

+border-box-sizing

.container 
  +container
  overflow: hidden

// ------------------------------------------------------------------------------------------
// HOW SUSY WORKS
// The Span Column mixin is probably the one used most while using Susy.
// It allows you to align an element to the grid you would like defined.

// The span column mixin takes a minimum of 1 argument
// and has the potential to accept a few more to customize to your needs.

// +span-columns( <$columns> [ <omega> , <$context>, <$padding>, <$from>, <$style>])
// ------------------------------------------------------------------------------------------

.container
  background-color: #fbeecb

.ag1 
  +span-columns(2)

.ag1, .ag3
  background-color: #71dad2

.ag2
  background-color: #fae7b3
  +span-columns(6, 10)
  overflow: hidden

.ag3
  +span-columns(2 omega)

.ag4
  +span-columns(3, 6)

.ag4,.ag5,.ag8,.ag9
  background-color: #ee9e9c

.ag5
  @include span-columns(3 omega, 6)

.ag6
  background-color: #f09671
  @include span-columns(2, 6)


.ag7
  background-color: #f6d784
  @include span-columns(4 omega, 6)
  overflow: hidden

.ag10
  background-color: #ea9fc3

.ag8
  @include span-columns(2, 4)

.ag9
  @include span-columns(2 omega, 4)

.ag10
  // There is no need to use span columns on AG 10 since elements take up 100% of the space by default in display block. In this case, we just have to make sure to clear the floats from ag8 and ag9. 
  clear: both
  // You can still use span-columns if you want to though. There's no fault in using that. 
  @include span-columns(4, 4)

/**
 * Text Styles
 */
h2
  text-align: center
  font-size: 1rem
  font-weight: normal
  padding-top: 1.8rem
  padding-bottom: 1.8rem
